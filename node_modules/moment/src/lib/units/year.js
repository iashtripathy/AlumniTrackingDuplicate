import { makeGetSet } from '../moment/get-set';
import { addFormatToken } from '../format/format';
import { addUnitAlias } from './aliases';
import { addUnitPriority } from './priorities';
<<<<<<< HEAD
import {
    addRegexToken,
    match1to2,
    match1to4,
    match1to6,
    match2,
    match4,
    match6,
    matchSigned,
} from '../parse/regex';
import { addParseToken } from '../parse/token';
import { isLeapYear } from '../utils/is-leap-year';
import { hooks } from '../utils/hooks';
import { YEAR } from './constants';
import toInt from '../utils/to-int';
import zeroFill from '../utils/zero-fill';
=======
import { addRegexToken, match1to2, match1to4, match1to6, match2, match4, match6, matchSigned } from '../parse/regex';
import { addParseToken } from '../parse/token';
import { hooks } from '../utils/hooks';
import { YEAR } from './constants';
import toInt from '../utils/to-int';
>>>>>>> bd5102a38a195cc780d136133078667941b408c9

// FORMATTING

addFormatToken('Y', 0, 0, function () {
    var y = this.year();
<<<<<<< HEAD
    return y <= 9999 ? zeroFill(y, 4) : '+' + y;
=======
    return y <= 9999 ? '' + y : '+' + y;
>>>>>>> bd5102a38a195cc780d136133078667941b408c9
});

addFormatToken(0, ['YY', 2], 0, function () {
    return this.year() % 100;
});

<<<<<<< HEAD
addFormatToken(0, ['YYYY', 4], 0, 'year');
addFormatToken(0, ['YYYYY', 5], 0, 'year');
=======
addFormatToken(0, ['YYYY',   4],       0, 'year');
addFormatToken(0, ['YYYYY',  5],       0, 'year');
>>>>>>> bd5102a38a195cc780d136133078667941b408c9
addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

// ALIASES

addUnitAlias('year', 'y');

// PRIORITIES

addUnitPriority('year', 1);

// PARSING

<<<<<<< HEAD
addRegexToken('Y', matchSigned);
addRegexToken('YY', match1to2, match2);
addRegexToken('YYYY', match1to4, match4);
addRegexToken('YYYYY', match1to6, match6);
=======
addRegexToken('Y',      matchSigned);
addRegexToken('YY',     match1to2, match2);
addRegexToken('YYYY',   match1to4, match4);
addRegexToken('YYYYY',  match1to6, match6);
>>>>>>> bd5102a38a195cc780d136133078667941b408c9
addRegexToken('YYYYYY', match1to6, match6);

addParseToken(['YYYYY', 'YYYYYY'], YEAR);
addParseToken('YYYY', function (input, array) {
<<<<<<< HEAD
    array[YEAR] =
        input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
=======
    array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
>>>>>>> bd5102a38a195cc780d136133078667941b408c9
});
addParseToken('YY', function (input, array) {
    array[YEAR] = hooks.parseTwoDigitYear(input);
});
addParseToken('Y', function (input, array) {
    array[YEAR] = parseInt(input, 10);
});

// HELPERS

export function daysInYear(year) {
    return isLeapYear(year) ? 366 : 365;
}

<<<<<<< HEAD
export { isLeapYear };
=======
export function isLeapYear(year) {
    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
}
>>>>>>> bd5102a38a195cc780d136133078667941b408c9

// HOOKS

hooks.parseTwoDigitYear = function (input) {
    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
};

// MOMENTS

export var getSetYear = makeGetSet('FullYear', true);

<<<<<<< HEAD
export function getIsLeapYear() {
=======
export function getIsLeapYear () {
>>>>>>> bd5102a38a195cc780d136133078667941b408c9
    return isLeapYear(this.year());
}
