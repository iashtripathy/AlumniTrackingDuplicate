import { copyConfig } from '../moment/constructor';
import { configFromStringAndFormat } from './from-string-and-format';
import getParsingFlags from './parsing-flags';
import { isValid } from './valid';
import extend from '../utils/extend';

// date from string and array of format strings
export function configFromStringAndArray(config) {
    var tempConfig,
        bestMoment,
<<<<<<< HEAD
        scoreToBeat,
        i,
        currentScore,
        validFormatFound,
        bestFormatIsValid = false;
=======

        scoreToBeat,
        i,
        currentScore;
>>>>>>> bd5102a38a195cc780d136133078667941b408c9

    if (config._f.length === 0) {
        getParsingFlags(config).invalidFormat = true;
        config._d = new Date(NaN);
        return;
    }

    for (i = 0; i < config._f.length; i++) {
        currentScore = 0;
<<<<<<< HEAD
        validFormatFound = false;
=======
>>>>>>> bd5102a38a195cc780d136133078667941b408c9
        tempConfig = copyConfig({}, config);
        if (config._useUTC != null) {
            tempConfig._useUTC = config._useUTC;
        }
        tempConfig._f = config._f[i];
        configFromStringAndFormat(tempConfig);

<<<<<<< HEAD
        if (isValid(tempConfig)) {
            validFormatFound = true;
=======
        if (!isValid(tempConfig)) {
            continue;
>>>>>>> bd5102a38a195cc780d136133078667941b408c9
        }

        // if there is any input that was not parsed add a penalty for that format
        currentScore += getParsingFlags(tempConfig).charsLeftOver;

        //or tokens
        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

        getParsingFlags(tempConfig).score = currentScore;

<<<<<<< HEAD
        if (!bestFormatIsValid) {
            if (
                scoreToBeat == null ||
                currentScore < scoreToBeat ||
                validFormatFound
            ) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
                if (validFormatFound) {
                    bestFormatIsValid = true;
                }
            }
        } else {
            if (currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
=======
        if (scoreToBeat == null || currentScore < scoreToBeat) {
            scoreToBeat = currentScore;
            bestMoment = tempConfig;
>>>>>>> bd5102a38a195cc780d136133078667941b408c9
        }
    }

    extend(config, bestMoment || tempConfig);
}
